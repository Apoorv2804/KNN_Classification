{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPOvLN86Ok41gHnNxejJazl",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/divyanshgoel09/KNN_Classification/blob/main/KNN_DSDL.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 74
        },
        "id": "YkzgnYoDVyGt",
        "outputId": "b9cbfd03-3d67-4930-c811-fbd12356255c"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-33ef093e-247f-4ba7-bc73-7a0d6204ac52\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-33ef093e-247f-4ba7-bc73-7a0d6204ac52\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving breastcancer.csv to breastcancer (1).csv\n"
          ]
        }
      ],
      "source": [
        "from google.colab import files\n",
        " \n",
        " \n",
        "uploaded = files.upload()\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "%matplotlib inline"
      ],
      "metadata": {
        "id": "teK2Vd1-WDpy"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data=pd.read_csv(\"breastcancer.csv\")"
      ],
      "metadata": {
        "id": "YXv9KZAGQRVm"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data.head(5)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 317
        },
        "id": "IYuTIMIbXHjX",
        "outputId": "b2a55faa-b3b3-4a3d-b651-7b0fd5a23a99"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "         id diagnosis  radius_mean  texture_mean  perimeter_mean  area_mean  \\\n",
              "0    842302         M        17.99         10.38          122.80     1001.0   \n",
              "1    842517         M        20.57         17.77          132.90     1326.0   \n",
              "2  84300903         M        19.69         21.25          130.00     1203.0   \n",
              "3  84348301         M        11.42         20.38           77.58      386.1   \n",
              "4  84358402         M        20.29         14.34          135.10     1297.0   \n",
              "\n",
              "   smoothness_mean  compactness_mean  concavity_mean  concave points_mean  \\\n",
              "0          0.11840           0.27760          0.3001              0.14710   \n",
              "1          0.08474           0.07864          0.0869              0.07017   \n",
              "2          0.10960           0.15990          0.1974              0.12790   \n",
              "3          0.14250           0.28390          0.2414              0.10520   \n",
              "4          0.10030           0.13280          0.1980              0.10430   \n",
              "\n",
              "   ...  radius_worst  texture_worst  perimeter_worst  area_worst  \\\n",
              "0  ...         25.38          17.33           184.60      2019.0   \n",
              "1  ...         24.99          23.41           158.80      1956.0   \n",
              "2  ...         23.57          25.53           152.50      1709.0   \n",
              "3  ...         14.91          26.50            98.87       567.7   \n",
              "4  ...         22.54          16.67           152.20      1575.0   \n",
              "\n",
              "   smoothness_worst  compactness_worst  concavity_worst  concave points_worst  \\\n",
              "0            0.1622             0.6656           0.7119                0.2654   \n",
              "1            0.1238             0.1866           0.2416                0.1860   \n",
              "2            0.1444             0.4245           0.4504                0.2430   \n",
              "3            0.2098             0.8663           0.6869                0.2575   \n",
              "4            0.1374             0.2050           0.4000                0.1625   \n",
              "\n",
              "   symmetry_worst  fractal_dimension_worst  \n",
              "0          0.4601                  0.11890  \n",
              "1          0.2750                  0.08902  \n",
              "2          0.3613                  0.08758  \n",
              "3          0.6638                  0.17300  \n",
              "4          0.2364                  0.07678  \n",
              "\n",
              "[5 rows x 32 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-99b440cf-b70b-407e-9f75-5e6192d90802\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>diagnosis</th>\n",
              "      <th>radius_mean</th>\n",
              "      <th>texture_mean</th>\n",
              "      <th>perimeter_mean</th>\n",
              "      <th>area_mean</th>\n",
              "      <th>smoothness_mean</th>\n",
              "      <th>compactness_mean</th>\n",
              "      <th>concavity_mean</th>\n",
              "      <th>concave points_mean</th>\n",
              "      <th>...</th>\n",
              "      <th>radius_worst</th>\n",
              "      <th>texture_worst</th>\n",
              "      <th>perimeter_worst</th>\n",
              "      <th>area_worst</th>\n",
              "      <th>smoothness_worst</th>\n",
              "      <th>compactness_worst</th>\n",
              "      <th>concavity_worst</th>\n",
              "      <th>concave points_worst</th>\n",
              "      <th>symmetry_worst</th>\n",
              "      <th>fractal_dimension_worst</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>842302</td>\n",
              "      <td>M</td>\n",
              "      <td>17.99</td>\n",
              "      <td>10.38</td>\n",
              "      <td>122.80</td>\n",
              "      <td>1001.0</td>\n",
              "      <td>0.11840</td>\n",
              "      <td>0.27760</td>\n",
              "      <td>0.3001</td>\n",
              "      <td>0.14710</td>\n",
              "      <td>...</td>\n",
              "      <td>25.38</td>\n",
              "      <td>17.33</td>\n",
              "      <td>184.60</td>\n",
              "      <td>2019.0</td>\n",
              "      <td>0.1622</td>\n",
              "      <td>0.6656</td>\n",
              "      <td>0.7119</td>\n",
              "      <td>0.2654</td>\n",
              "      <td>0.4601</td>\n",
              "      <td>0.11890</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>842517</td>\n",
              "      <td>M</td>\n",
              "      <td>20.57</td>\n",
              "      <td>17.77</td>\n",
              "      <td>132.90</td>\n",
              "      <td>1326.0</td>\n",
              "      <td>0.08474</td>\n",
              "      <td>0.07864</td>\n",
              "      <td>0.0869</td>\n",
              "      <td>0.07017</td>\n",
              "      <td>...</td>\n",
              "      <td>24.99</td>\n",
              "      <td>23.41</td>\n",
              "      <td>158.80</td>\n",
              "      <td>1956.0</td>\n",
              "      <td>0.1238</td>\n",
              "      <td>0.1866</td>\n",
              "      <td>0.2416</td>\n",
              "      <td>0.1860</td>\n",
              "      <td>0.2750</td>\n",
              "      <td>0.08902</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>84300903</td>\n",
              "      <td>M</td>\n",
              "      <td>19.69</td>\n",
              "      <td>21.25</td>\n",
              "      <td>130.00</td>\n",
              "      <td>1203.0</td>\n",
              "      <td>0.10960</td>\n",
              "      <td>0.15990</td>\n",
              "      <td>0.1974</td>\n",
              "      <td>0.12790</td>\n",
              "      <td>...</td>\n",
              "      <td>23.57</td>\n",
              "      <td>25.53</td>\n",
              "      <td>152.50</td>\n",
              "      <td>1709.0</td>\n",
              "      <td>0.1444</td>\n",
              "      <td>0.4245</td>\n",
              "      <td>0.4504</td>\n",
              "      <td>0.2430</td>\n",
              "      <td>0.3613</td>\n",
              "      <td>0.08758</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>84348301</td>\n",
              "      <td>M</td>\n",
              "      <td>11.42</td>\n",
              "      <td>20.38</td>\n",
              "      <td>77.58</td>\n",
              "      <td>386.1</td>\n",
              "      <td>0.14250</td>\n",
              "      <td>0.28390</td>\n",
              "      <td>0.2414</td>\n",
              "      <td>0.10520</td>\n",
              "      <td>...</td>\n",
              "      <td>14.91</td>\n",
              "      <td>26.50</td>\n",
              "      <td>98.87</td>\n",
              "      <td>567.7</td>\n",
              "      <td>0.2098</td>\n",
              "      <td>0.8663</td>\n",
              "      <td>0.6869</td>\n",
              "      <td>0.2575</td>\n",
              "      <td>0.6638</td>\n",
              "      <td>0.17300</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>84358402</td>\n",
              "      <td>M</td>\n",
              "      <td>20.29</td>\n",
              "      <td>14.34</td>\n",
              "      <td>135.10</td>\n",
              "      <td>1297.0</td>\n",
              "      <td>0.10030</td>\n",
              "      <td>0.13280</td>\n",
              "      <td>0.1980</td>\n",
              "      <td>0.10430</td>\n",
              "      <td>...</td>\n",
              "      <td>22.54</td>\n",
              "      <td>16.67</td>\n",
              "      <td>152.20</td>\n",
              "      <td>1575.0</td>\n",
              "      <td>0.1374</td>\n",
              "      <td>0.2050</td>\n",
              "      <td>0.4000</td>\n",
              "      <td>0.1625</td>\n",
              "      <td>0.2364</td>\n",
              "      <td>0.07678</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 32 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-99b440cf-b70b-407e-9f75-5e6192d90802')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-99b440cf-b70b-407e-9f75-5e6192d90802 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-99b440cf-b70b-407e-9f75-5e6192d90802');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "del data['id']"
      ],
      "metadata": {
        "id": "KilGVRUxYutV"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data.dtypes"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "s79zaQd4Xvkv",
        "outputId": "16969dec-9137-46bc-f654-883f670efe14"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "diagnosis                   object\n",
              "radius_mean                float64\n",
              "texture_mean               float64\n",
              "perimeter_mean             float64\n",
              "area_mean                  float64\n",
              "smoothness_mean            float64\n",
              "compactness_mean           float64\n",
              "concavity_mean             float64\n",
              "concave points_mean        float64\n",
              "symmetry_mean              float64\n",
              "fractal_dimension_mean     float64\n",
              "radius_se                  float64\n",
              "texture_se                 float64\n",
              "perimeter_se               float64\n",
              "area_se                    float64\n",
              "smoothness_se              float64\n",
              "compactness_se             float64\n",
              "concavity_se               float64\n",
              "concave points_se          float64\n",
              "symmetry_se                float64\n",
              "fractal_dimension_se       float64\n",
              "radius_worst               float64\n",
              "texture_worst              float64\n",
              "perimeter_worst            float64\n",
              "area_worst                 float64\n",
              "smoothness_worst           float64\n",
              "compactness_worst          float64\n",
              "concavity_worst            float64\n",
              "concave points_worst       float64\n",
              "symmetry_worst             float64\n",
              "fractal_dimension_worst    float64\n",
              "dtype: object"
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(15,5))\n",
        "sns.countplot(data['diagnosis'])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 319
        },
        "id": "SazKiPA3U5Uc",
        "outputId": "8e985289-01d5-45e1-e660-3d73c1881da0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.8/dist-packages/seaborn/_decorators.py:36: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7fb98f271820>"
            ]
          },
          "metadata": {},
          "execution_count": 20
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1080x360 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data['diagnosis'].value_counts(normalize=True)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KICJfk5SVMLx",
        "outputId": "8b496676-1f62-4fe4-cd34-63683ae64f47"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "B    0.627417\n",
              "M    0.372583\n",
              "Name: diagnosis, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 21
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x=data.iloc[ : ,3:25]\n",
        "y=data['diagnosis']\n",
        "from sklearn.model_selection import train_test_split\n",
        "x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.3,random_state=2)"
      ],
      "metadata": {
        "id": "UEalVpjGVdy0"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "from sklearn.metrics import accuracy_score\n",
        "from sklearn.metrics import recall_score"
      ],
      "metadata": {
        "id": "_ziSqhuLVhGf"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "a_score=[]\n",
        "for k in range(1,26,2):\n",
        "  knn=KNeighborsClassifier(n_neighbors=k)\n",
        "  knn.fit(x_train,y_train)\n",
        "  y_pred=knn.predict(x_test)\n",
        "  accuracy=accuracy_score(y_test,y_pred)\n",
        "  a_score.append(accuracy)\n",
        "\n",
        "mse=[1 - x for x in a_score]\n"
      ],
      "metadata": {
        "id": "eV6friOyVlmh"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print (mse)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MonUv0n9Vu4X",
        "outputId": "934ecc09-5c28-4bc2-8dad-898839a794b5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[0.10526315789473684, 0.08771929824561409, 0.1286549707602339, 0.1286549707602339, 0.10526315789473684, 0.10526315789473684, 0.11695906432748537, 0.11111111111111116, 0.11111111111111116, 0.11695906432748537, 0.11695906432748537, 0.11695906432748537, 0.11695906432748537]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "max=a_score[0]\n",
        "for j in a_score:\n",
        "  if(j>max):\n",
        "    max=j\n",
        "print(max)    "
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "N3EwW8ErWED2",
        "outputId": "6bf378d1-4cc5-4f94-bfd3-9340a652bd62"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.9122807017543859\n"
          ]
        }
      ]
    }
  ]
}
